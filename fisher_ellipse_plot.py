# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o7cjTNDFIuYv5GBCHRKgdh7layI_GvuR
"""

#@title Header File
import pandas as pd
import numpy as np
from IPython.display import Image
import matplotlib.pyplot as plt
from scipy.integrate import simps
from scipy.integrate import quad
from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,AutoMinorLocator)
import math
from matplotlib.patches import Ellipse
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,AutoMinorLocator)
from copy import copy
import seaborn as sns

#@title Functions
def a_square(sigma_x, sigma_y, sigma_xy):
    F = sigma_x + sigma_y
    G = (sigma_x - sigma_y)**2
    H = (G/4) + sigma_xy**2
    A = F/2 + np.sqrt(H)
    return A

def b_square(sigma_x, sigma_y, sigma_xy):
    F = sigma_x + sigma_y
    G = (sigma_x - sigma_y)**2
    H = (G/4) + sigma_xy**2
    B = F/2 - np.sqrt(H)
    return B

def tan_two_theta(sigma_x, sigma_y, sigma_xy):
    #print ('theta :', -math.degrees(0.5*math.atan(2*sigma_xy/(sigma_x-sigma_y))))
    return(0.5*math.atan(2*sigma_xy/(sigma_x-sigma_y)))

def area(sigma_x, sigma_y, sigma_xy):
    A = np.pi*(np.sqrt(a_square(sigma_x, sigma_y, sigma_xy))*alpha)*(np.sqrt(b_square(sigma_x, sigma_y, sigma_xy))*alpha)
    print('FOM ',np.pi/A)
    return (np.pi/A)

def par(sigma_x, sigma_y, sigma_xy):
    a_star = np.sqrt(np.abs(a_square(sigma_x, sigma_y, sigma_xy)))*2*1.52
    b_star = np.sqrt(np.abs(b_square(sigma_x, sigma_y, sigma_xy)))*2*1.52
    two_theta = tan_two_theta(sigma_x, sigma_y, sigma_xy)
    param = [a_star, b_star, two_theta]
    return param

#@title Input Fisher Matrix
input_fisher_matrix = np.array([[ 8.6532e+00,  1.1937e+02,  6.9695e+01,  1.2335e+01],   # GR,Dl
 [ 1.1937e+02,  2.8144e+04, -6.2031e+03, -1.8064e+03],
 [ 6.9695e+01, -6.2031e+03,  2.5642e+03,  6.4413e+02],
 [ 1.2335e+01, -1.8064e+03,  6.4413e+02,  1.6688e+02]])

#@title Plot Function
def fisher(input_fisher_matrix,label):
  Cov_1 = np.linalg.pinv(input_fisher_matrix)  # GR
  C_ij_PRIOR1 = np.sqrt(np.abs(np.diag(Cov_1)))
  print(C_ij_PRIOR1)
  F2 = [0, -1,C_ij_PRIOR1[3]**2 ,C_ij_PRIOR1[2]**2 ,Cov_1[3][2] ]
  alpha = 1.52    # arxiv : 0906.4123. 1-s CL
  print ('The Height and Width roughly is %.2f  %.2f' % (
    2*alpha*np.sqrt(F2[2]), 2*alpha*np.sqrt(F2[3])))  
  params2 = par(F2[2], F2[3], F2[4])
  ell   = mpl.patches.Ellipse(xy=[-1, 0],width=params2[1],height=params2[0],angle=-math.degrees(params2[2]), facecolor=(0.3,0,1.,.9),alpha=0.99, edgecolor='b', linewidth=1, label=label)
  print('    FOM 1',1/(params2[1]*params2[0]*2.3 ))
  fig, ax = plt.subplots()
  ax.add_patch(ell)
  ax.set_aspect('auto')
  ax.set_facecolor('none')
  ax.autoscale()  # ''tight
  ax.scatter(F2[1], F2[0], c='black', marker='o',s=150, label='($w_0-w_a$) = (-1, 0)',zorder=5)
  ax.set_xlabel(r'$w_0$',fontsize=20)
  ax.set_ylabel(r'$w_a$',fontsize=20)
  ax.yaxis.set_ticks_position('both')
  ax.xaxis.set_ticks_position('both')

  ax.minorticks_on()
  #plt.scatter(F2[1], F2[0], c='black', marker='o',s=150, label='_nolegend_')
  plt.legend(loc = 'upper right',prop={'size': 14})
  plt.tight_layout()
  plt.show()
  #plt.savefig('plot3.pdf',bbox_inches='tight')

fisher(input_fisher_matrix,'Test Ellipse')

